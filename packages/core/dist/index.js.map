{"version":3,"sources":["../src/index.ts"],"sourcesContent":["import { convertToModelMessages, createUIMessageStream, generateObject, ModelMessage, streamObject, StreamObjectResult, UIMessage, UIMessageStreamWriter } from 'ai';\r\nimport { openai } from '@ai-sdk/openai';\r\nimport z from 'zod';\r\n\r\nconst model = openai('gpt-4.1-nano');\r\n\r\nexport type ChatContext = {\r\n    messages: UIMessage[];\r\n    // TODO: add model config\r\n}\r\n\r\nexport type Option = {\r\n    label: string;\r\n    value: string;\r\n}\r\n\r\nexport type ComponentConfig = {\r\n    id: string;\r\n    name: string;\r\n    description: string;\r\n    datasourceDefinition?: {\r\n        name: string;\r\n        fields: {\r\n            name: string;\r\n            type: 'text' | 'number' | 'image' | 'checkbox' | 'select' | 'multi-select' | 'rte' | 'date';\r\n            options?: Option[];\r\n        }[];\r\n    };\r\n    placeholders?: string[];\r\n};\r\n\r\nexport type PageBuilderContext = {\r\n    config: {\r\n        components: ComponentConfig[];\r\n        startPlaceholder: string;\r\n    }\r\n}\r\n\r\nfunction chooseStep(chat: ChatContext) {\r\n    return streamObject({\r\n        model,\r\n        messages: convertToModelMessages(chat.messages),\r\n        system: `\r\n## Instructions\r\nBased on conversation, choose the best step to take next.\r\nChoose 'generate' step if ALL the following:\r\n- context of the page is clear\r\n- all components and their place in the page are known\r\n- the overall structure of the page is clear\r\n- the overview is confirmed with the user\r\n\r\nIf any of the above is not true, choose 'refine' step.\r\n        `,\r\n        schema: z.object({\r\n            step: z.union([\r\n                z.literal('generate').describe('when it\\'s enough information to generate the page'),\r\n                z.literal('refine').describe('need to ask more questions to refine the page generation'),\r\n            ]),\r\n            question: z.string().describe('Questions to ask the user, if need to refine. Empty if generate.'),\r\n        }),\r\n    });\r\n}\r\n\r\nfunction streamHighLevelStructure(chat: ChatContext) {\r\n    return streamObject({\r\n        model,\r\n        messages: convertToModelMessages(chat.messages),\r\n        system: `\r\n## Instructions\r\nGenerate a page based on the provided structure and components.\r\n        `,\r\n        schema: z.object({\r\n            page: z.object({\r\n                title: z.string().describe('Page title'),\r\n                description: z.string().describe('Page description'),\r\n                components: z.array(z.object({\r\n                    name: z.string().describe('Component name'),\r\n                })).describe('Components to include in the page'),\r\n            }).describe('Page structure and content'),\r\n        }),\r\n    });\r\n}\r\n\r\nexport const generatePage = async (chat: ChatContext, writer: UIMessageStreamWriter) => {\r\n    function state(type: string, data?: any) {\r\n        writer.write({\r\n            type: `data-${type}`,\r\n            id: type,\r\n            data,\r\n        });\r\n    };\r\n\r\n    async function writeObjectStream<T>(type: string, streamObject: StreamObjectResult<unknown, T, any>) {\r\n        state(type, { state: 'loading' });\r\n        for await (const part of streamObject.partialObjectStream) {\r\n            state(type, { state: 'streaming', data: part });\r\n        }\r\n        const result = await streamObject.object;\r\n        state(type, { state: 'done', data: result });\r\n        return result;\r\n    }\r\n\r\n    const step = await writeObjectStream('step', chooseStep(chat));\r\n\r\n    // need to ask additional questions from user, so return\r\n    if (step.step === 'refine') {\r\n        return;\r\n    }\r\n\r\n    // page structure is clear, need to summarize it and generate the page\r\n    const highLevelStructure = await writeObjectStream('high-level-structure', streamHighLevelStructure(chat));\r\n\r\n    // now we have the high level structure, we can generate the page\r\n    const page = await writeObjectStream('page', streamObject({\r\n        model,\r\n        messages: convertToModelMessages(chat.messages),\r\n        system: `\r\n## Instructions\r\nGenerate a page based on the provided structure and components.\r\n        `,\r\n        schema: z.object({\r\n            page: z.object({\r\n                title: z.string().describe('Page title'),\r\n                description: z.string().describe('Page description'),\r\n                components: z.array(z.object({\r\n                    name: z.string().describe('Component name'),\r\n                })).describe('Components to include in the page'),\r\n            }).describe('Page structure and content'),\r\n        }),\r\n    }));\r\n\r\n    return page;\r\n}\r\n\r\nexport const streamPage = (chat: ChatContext) => {\r\n    return createUIMessageStream({\r\n        execute: async ({ writer }) => {\r\n            await generatePage(chat, writer);\r\n        },\r\n        onError: (error) => {\r\n            console.log('Error:', error);\r\n            return 'ERROR occurred while generating the page.';\r\n        }\r\n    });\r\n}\r\n"],"mappings":"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","names":["z","streamObject"]}